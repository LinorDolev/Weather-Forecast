{"version":3,"sources":["components/favorites/Favorites.js","components/dayWeather/DayWeather.js","components/currentWeather/CurrentWeather.js","services/WeatherService.js","components/home/Home.js","routing/routes.js","components/app/App.js","components/reducers/Reducers.js","index.js"],"names":["Favorites","props","state","favorites","window","localStorage","getItem","Object","keys","map","key","React","Component","DayWeather","this","day","temperature","unit","iconNumber","dayName","Date","toString","split","formattedIconNumber","Container","className","src","alt","CurrentWeather","cityName","weatherText","style","width","height","API","WeatherService","locationKey","fetch","then","request","json","body","DailyForecasts","searchWord","DEFAULT_CITY","city","Home","autoCompleteList","fiveDaysForecast","isFavorite","JSON","parse","filterOutCity","length","cities","cityToFilter","filter","event","curretSearchText","target","value","getAutoComplete","setState","getCurrentWeather","weatherInfo","Temperature","Metric","Value","WeatherText","WeatherIcon","get5DaysForecast","refreshWeather","currentCity","filteredCities","push","setItem","stringify","item","representation","LocalizedName","Country","label","Key","cityInfo","bind","heartIconClassName","InputGroup","inside","placeholder","onChange","onChangeSearch","AutoComplete","onSelect","onSelectCity","data","toAutoCompleteResultItem","Button","Icon","icon","IconButton","circle","size","onClick","onClickedAddToFavorite","FlexboxGrid","justify","dayForecast","index","Item","Maximum","Unit","Day","Routes","exact","path","component","App","darkMode","prevDarkMode","console","log","theme","WeatherNavbar","onDarkModeChanged","toggleDarkMode","RadioGroup","id","name","inline","appearance","defaultValue","Radio","Navbar","Header","href","Body","Nav","pullRight","Toggle","checkedChildren","unCheckedChildren","allReducers","combineReducers","dayWeather","action","type","homeReducer","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.1684b180.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Favorites.css';\r\n\r\n\r\n\r\nexport default class Favorites extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            favorites: []\r\n        };\r\n    }\r\n\r\n    render() {\r\n        let favorites = window.localStorage.getItem('favorites');\r\n\r\n        return (\r\n            <div>\r\n                {\r\n                    Object.keys(favorites).map(key => (\r\n                            <span> key={key} details={favorites[key]} </span>))\r\n                }\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n","import React from \"react\";\r\nimport './DayWeather.css';\r\nimport { Container } from 'rsuite';\r\n\r\n\r\n\r\nexport default class DayWeather extends React.Component {\r\n\r\n     render() {\r\n        const {day, temperature, unit, iconNumber} = this.props;\r\n        let dayName = new Date(day).toString().split(' ')[0];\r\n\r\n        let formattedIconNumber = iconNumber < 10 ? '0' + iconNumber : iconNumber;\r\n        return (\r\n                <Container className='container'>\r\n                    <div>{dayName}</div>\r\n                    <div>{temperature}° {unit}</div>\r\n                    <img src={`/#/icons/${formattedIconNumber}-s.png`} alt={'weather forecast'}/>\r\n                </Container>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport const dayWeatherReducer =\r\n    (state = 0, action)=>{\r\n        switch (action.type) {\r\n            case 'DAY':\r\n                return state;\r\n            default:\r\n                return state;\r\n\r\n        }\r\n    };\r\n","import React from 'react'\r\nimport './CurrentWeather.css';\r\n\r\nexport default class CurrentWeather extends React.Component{\r\n\r\n    render() {\r\n        const {cityName, temperature, weatherText, iconNumber} = this.props;\r\n        let formattedIconNumber = iconNumber < 10 ? '0' + iconNumber : iconNumber;\r\n\r\n        return (\r\n            <div>\r\n            <div className='center-text'>\r\n                <span>\r\n                    {cityName}\r\n                    <br/>\r\n                    {weatherText}\r\n                    <img src={`/icons/${formattedIconNumber}-s.png`}\r\n                         alt={'weather forecast'} style={{width:'125px', height:'75px'}}/>\r\n                    <br/>\r\n                    {temperature}° C\r\n                </span>\r\n            </div>\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n","\r\nconst API = 'ix9CMq6dvA1LGFpVgUytGEDDeLy2Wv5a';\r\n\r\nexport default class WeatherService {\r\n\r\n    static getCurrentWeather(locationKey){\r\n        const URL = `http://dataservice.accuweather.com/currentconditions/v1/${locationKey}?apikey=${API}`;\r\n        const DUMMY_URL = 'http://localhost:3000/dummy/TelAviv.json';\r\n        return fetch(DUMMY_URL).then((request) => {\r\n            return request.json()\r\n        }).then((body) => {\r\n            return body[0]\r\n        });\r\n    }\r\n\r\n    static get5DaysForecast(locationKey){\r\n        const URL = `http://dataservice.accuweather.com/forecasts/v1/daily/5day/${locationKey}?apikey=${API}&metric=true`;\r\n        const DUMMY_URL = 'http://localhost:3000/dummy/5DaysTelAviv.json';\r\n        return fetch(DUMMY_URL).then((request) => {\r\n            return request.json()\r\n        }).then((body) => {\r\n            return body.DailyForecasts;\r\n        });\r\n    }\r\n\r\n    static getAutoComplete(searchWord){\r\n        const URL = `http://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${API}&q=${searchWord}`;\r\n        const DUMMY_URL = `http://localhost:3000/dummy/AutoCompleteTel.json`\r\n\r\n        return fetch(DUMMY_URL).then((request) => {\r\n            return request.json()\r\n        }).then((body) => {\r\n            return body;\r\n        });\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport \"./Home.css\";\r\nimport DayWeather from \"../dayWeather/DayWeather\";\r\nimport {FlexboxGrid, AutoComplete, InputGroup, Icon, IconButton} from 'rsuite';\r\nimport CurrentWeather from \"../currentWeather/CurrentWeather\"\r\nimport WeatherService from \"../../services/WeatherService.js\"\r\n\r\n\r\nconst FAVORITES_KEY = 'favorites';\r\nconst DEFAULT_CITY_NAME = 'Tel-Aviv';\r\nconst DEFAULT_LOCATION_KEY = '215854';\r\nconst DEFAULT_CITY = {locationKey: DEFAULT_LOCATION_KEY, city: DEFAULT_CITY_NAME};\r\n\r\n\r\nexport default class Home extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            autoCompleteList: [],\r\n            fiveDaysForecast: [],\r\n            cityName: DEFAULT_CITY_NAME,\r\n            temperature:0,\r\n            weatherText:\"\",\r\n            locationKey: DEFAULT_LOCATION_KEY,\r\n            iconNumber: 0,\r\n            unit:\"\",\r\n            isFavorite: this.isFavorite()\r\n        };\r\n    }\r\n\r\n    isFavorite(locationKey=DEFAULT_CITY){\r\n        let favorites = JSON.parse(window.localStorage.getItem(FAVORITES_KEY));\r\n        if(favorites === null)\r\n            return false;\r\n\r\n        return this.filterOutCity(favorites, locationKey).length !== favorites.length;\r\n    }\r\n\r\n    filterOutCity(cities, cityToFilter){\r\n        return cities.filter((city) => city.locationKey !== cityToFilter.locationKey)\r\n    }\r\n\r\n\r\n    onChangeSearch(event){\r\n        let curretSearchText = event.target.value;\r\n        if(!curretSearchText || curretSearchText === \"\"){\r\n            return\r\n        }\r\n        WeatherService.getAutoComplete(curretSearchText).then(\r\n            (autoCompleteList) => {\r\n                this.setState({autoCompleteList});\r\n            }\r\n        )\r\n    }\r\n\r\n    refreshWeather(){\r\n        WeatherService.getCurrentWeather(this.state.locationKey).then((weatherInfo) => {\r\n            let temperature = weatherInfo.Temperature.Metric.Value;\r\n            let weatherText = weatherInfo.WeatherText;\r\n            let isFavorite = this.isFavorite({\r\n                locationKey: this.state.locationKey\r\n            });\r\n            let iconNumber = weatherInfo.WeatherIcon;\r\n            this.setState({temperature, weatherText, isFavorite, iconNumber});\r\n        });\r\n\r\n        WeatherService.get5DaysForecast(this.state.locationKey).then((fiveDaysForecast) => {\r\n            this.setState({fiveDaysForecast});\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshWeather();\r\n\r\n    }\r\n\r\n\r\n\r\n    onClickedAddToFavorite(){\r\n        let favorites = window.localStorage.getItem(FAVORITES_KEY);\r\n\r\n        if(favorites == null){\r\n            favorites = [];\r\n        }else {\r\n            favorites = JSON.parse(favorites);\r\n        }\r\n\r\n        let currentCity = {\r\n            locationKey: this.state.locationKey,\r\n            cityName: this.state.cityName\r\n        };\r\n\r\n        let filteredCities = this.filterOutCity(favorites, currentCity);\r\n        if(favorites.length === filteredCities.length) {\r\n            favorites.push(currentCity);\r\n            this.setState({\r\n                isFavorite: true\r\n            });\r\n        }\r\n        else {\r\n            favorites = filteredCities;\r\n            this.setState({\r\n                isFavorite: false\r\n            });\r\n        }\r\n        window.localStorage.setItem(FAVORITES_KEY, JSON.stringify(favorites));\r\n    }\r\n\r\n    toAutoCompleteResultItem(item){\r\n        let representation = item.LocalizedName + \", \" + item.Country.LocalizedName;\r\n        return {\r\n            label: representation,\r\n            value: representation,\r\n            key: item.Key\r\n        };\r\n    }\r\n\r\n    onSelectCity(cityInfo){\r\n        this.setState(\r\n            {\r\n                locationKey: cityInfo.key,\r\n                cityName: cityInfo.label\r\n            },\r\n            this.refreshWeather.bind(this)\r\n        );\r\n    }\r\n\r\n    render(){\r\n        const heartIconClassName = this.state.isFavorite ? 'icon-red-heart' : 'icon-gray-heart';\r\n        return(\r\n            <div className={'home'}>\r\n                <div className={'search-container'}>\r\n                    <InputGroup inside className={'search-bar'}\r\n                                placeholder={'Search here...'}\r\n                                onChange={this.onChangeSearch.bind(this)}>\r\n                    <AutoComplete onSelect={this.onSelectCity.bind(this)}\r\n                                  data={this.state.autoCompleteList.map(this.toAutoCompleteResultItem.bind(this))}/>\r\n                        <InputGroup.Button>\r\n                            <Icon icon=\"search\" />\r\n                        </InputGroup.Button>\r\n                    </InputGroup>\r\n\r\n                </div>\r\n                <div className='add-to-favorites'>\r\n                    <IconButton className={heartIconClassName} icon={<Icon icon=\"heart\" />}\r\n                                circle size=\"lg\"\r\n                                onClick={this.onClickedAddToFavorite.bind(this)}/>\r\n                </div>\r\n\r\n                <CurrentWeather cityName={this.state.cityName}\r\n                                temperature={this.state.temperature}\r\n                                weatherText={this.state.weatherText}\r\n                                iconNumber={this.state.iconNumber}\r\n                />\r\n\r\n                <FlexboxGrid justify=\"space-around\" className={'flex-grid'}>\r\n                        {this.state.fiveDaysForecast.map((dayForecast, index) => (\r\n                        <FlexboxGrid.Item key={index}>\r\n                            <DayWeather day={dayForecast.Date}\r\n                                        temperature={dayForecast.Temperature.Maximum.Value}\r\n                                        unit={dayForecast.Temperature.Maximum.Unit}\r\n                                        iconNumber={dayForecast.Day.Icon}\r\n                            />\r\n                        </FlexboxGrid.Item>\r\n                    ))}\r\n                </FlexboxGrid>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport const homeReducer = (state = 0, action)=>{\r\n    switch (action.type) {\r\n        case 'DAY':\r\n            return state;\r\n        default:\r\n            return state;\r\n\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport Favorites from \"../components/favorites/Favorites\";\r\nimport Home from \"../components/home/Home\";\r\nimport { Route, Switch } from 'react-router-dom';\r\n\r\nfunction Routes() {\r\n   return(\r\n    <Switch>\r\n        <Route exact path=\"/\" component={Home}/>\r\n        <Route path=\"/home\" component={Home}/>\r\n        <Route path=\"/favorites\" component={Favorites}/>\r\n    </Switch>\r\n   );\r\n}\r\n\r\nexport default Routes;\r\n","import React from 'react';\nimport './App.css';\nimport {Navbar, Nav, Icon, Toggle, RadioGroup, Radio } from 'rsuite';\nimport 'rsuite/dist/styles/rsuite-default.css';\nimport Routes from '../../routing/routes';\nimport {HashRouter} from \"react-router-dom\";\n\n\nexport default class App extends React.Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            darkMode: false\n        }\n    }\n\n    toggleDarkMode(){\n        let prevDarkMode = this.state.darkMode;\n        this.setState({\n           darkMode:  !prevDarkMode\n        }, () => {\n            console.log(\"Dark Mode: \" + this.state.darkMode);\n        });\n\n    }\n\n    render(){\n        let theme = this.state.darkMode ? 'theme-dark': 'theme-light';\n\n        return (\n            <div className={`app ${theme}`}>\n                <HashRouter>\n                    <WeatherNavbar darkMode={this.state.darkMode}\n                                   onDarkModeChanged={() => this.toggleDarkMode()}/>\n                        <RadioGroup id=\"temp-scale-radio\" name=\"radioList\" inline appearance=\"picker\" defaultValue=\"C\" >\n                            <Radio id=\"celsius-scale\" value=\"C\">Celsius</Radio>\n                            <Radio id=\"fahrenheit-scale\" value=\"F\">Fahrenheit</Radio>\n                        </RadioGroup>\n\n                     <Routes/>\n                </HashRouter>\n            </div>\n        );\n    }\n}\n\n\n\nfunction WeatherNavbar(props) {\n    const {darkMode, onDarkModeChanged} = props;\n    return (\n        <Navbar id={'navbar'} className={'nav'}>\n            <Navbar.Header>\n                <a className=\"logo\" href={\"/\"}>\n                    HeroWeather\n                </a>\n            </Navbar.Header>\n            <Navbar.Body>\n                <Nav pullRight>\n                    <Nav.Item href={\"/#/home/\"} icon={<Icon icon=\"home\" />}>\n                        Home\n                    </Nav.Item>\n                    <Nav.Item href={\"/#/favorites/\"} icon={<Icon icon=\"star\" />}>\n                        Favorites\n                    </Nav.Item>\n\n                    <small>\n                        <Toggle className='toggle-theme'\n                                size=\"lg\"\n                                checkedChildren=\"Dark\"\n                                unCheckedChildren=\"Light\"\n                                value={darkMode}\n                                onChange={onDarkModeChanged}\n                        />\n                    </small>\n                </Nav>\n\n            </Navbar.Body>\n\n        </Navbar>\n    );\n}\n","import {dayWeatherReducer} from \"../dayWeather/DayWeather\";\r\nimport {homeReducer} from \"../home/Home\";\r\nimport {combineReducers} from 'redux';\r\nimport React from \"react\";\r\n\r\nconst allReducers = combineReducers({\r\n    dayWeather: dayWeatherReducer,\r\n    homeReducer: homeReducer\r\n});\r\n\r\nexport default allReducers;\r\n","import React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport 'rsuite/dist/styles/rsuite-default.css';\nimport {createStore} from 'redux';\nimport allReducers from './components/reducers/Reducers';\n\nconst store = createStore(\n    allReducers,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}